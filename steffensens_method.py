#!/usr/bin/python3

from math import cos, pi, sin

def steffensens_method(f, p0, tol=0, n0=1000):
    '''
        Steffensen's method is a root finding method similar to Newton's method
        that achieves quadratic convergence wihtout using derivatives by making
        use of Aitkin's delta-squared process 
        
        Every third term is generated by Aitkin's process while the other terms
        are found with fixed point iteration

        f - The formula for which to find roots
        p0 - Initial approximation of the root
        tol - Acceptable error tolerence for the answer
        n0, - Maximum number of iterations before giving up
    '''
    i = 1
    while i < n0:
        # Obtain the first 2 guesses with iteration
        p1 = f(p0)
        p2 = f(p1)
        # use Aitkins delta squared method to get a better approximation
        p = p0 - (p1 - p0)**2/(p2 - 2*p1 + p0)
        print('n', i - 1, 'p0', p0, 'p1', p1, 'p2', p2)
        if abs(p - p0) < tol:
            print(p)
            return
        i += 1
        p0 = p
    
    print('The method failed after N0 iteration, N0 = ', n0)
    
if __name__ == "__main__":
    f = lambda x: (10 / (x + 4))**0.5

    steffensens_method(f, pi/4, tol=1*10**-8, n0=200)
